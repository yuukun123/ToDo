import os.path
import tkinter as tk
from tkinter import filedialog
from tkinter import messagebox
from tkcalendar import DateEntry
from datetime import datetime  # ‚úÖ Th√™m ·ªü ƒë·∫ßu file n·∫øu ch∆∞a c√≥
import time
import api_client
import pygame
import urllib.parse
import requests

class TodoApp:
    def __init__(self, root, username):
        self.root = root
        self.username = username
        self.root.title(f"Todo List - {username}")
        self.todos = api_client.get_todos(username)

        self.check_all_deadlines()

        # Header v·ªõi th√¥ng tin ng∆∞·ªùi d√πng v√† n√∫t logout
        self.header_frame = tk.Frame(self.root)
        self.header_frame.pack(padx=10, pady=(10, 0), fill='x')

        self.user_label = tk.Label(self.header_frame, text=f"üë§ Logged in as: {self.username}", anchor='w')
        self.user_label.pack(side=tk.LEFT)

        self.logout_button = tk.Button(self.header_frame, text="üîì Logout", command=self.logout)
        self.logout_button.pack(side=tk.RIGHT)

        # Sau ƒë√≥ m·ªõi pack ph·∫ßn n·ªôi dung ch√≠nh
        self.frame = tk.Frame(self.root)
        self.frame.pack(padx=10, pady=10)

        # nh·∫≠p ti√™u ƒë·ªÅ
        self.title_label = tk.Label(self.frame, text="Title")
        self.title_label.pack()
        self.title_entry = tk.Entry(self.frame, width=40)
        self.title_entry.pack(pady=5)

        # nh·∫≠p m√¥ t·∫£ c√¥ng vi·ªác
        self.description_label = tk.Label(self.frame, text="Description")
        self.description_label.pack()
        self.description_entry = tk.Entry(self.frame, width=40)
        self.description_entry.pack(pady=5)

        # ch·ªçn deadline
        self.Deadline_label = tk.Label(self.frame, text="Deadline")
        self.Deadline_label.pack()

        self.day_frame = tk.Frame(self.frame)
        self.day_frame.pack(pady=5, anchor='w', padx=28)

        self.date_entry = DateEntry(self.day_frame, width=22, background='darkblue',
                                    foreground='white', borderwidth=2, date_pattern='dd-mm-yyyy')
        self.date_entry.pack(side=tk.LEFT)

        # ch·ªçn ph√∫t tr∆∞·ªõc th√¥ng b√°o deadline tr∆∞·ªõc bao nhi√™u
        self.hour_spinbox = tk.Spinbox(self.day_frame, from_=0, to=23, width=3, format="%02.0f")
        self.hour_spinbox.pack(side=tk.LEFT, padx=(10, 0))

        self.colon_label = tk.Label(self.day_frame, text=":")
        self.colon_label.pack(side=tk.LEFT)

        self.minute_spinbox = tk.Spinbox(self.day_frame, from_=0, to=59, width=3, format="%02.0f")
        self.minute_spinbox.pack(side=tk.LEFT)

        # nhƒÉc khi c√≤n bao nhi√™u ph√∫t t·ªõi deadline
        self.lead_label = tk.Label(self.frame, text="Nh·∫Øc tr∆∞·ªõc (ph√∫t):")
        self.lead_label.pack()

        self.lead_spinbox = tk.Spinbox(self.frame, from_=0, to=120, width=5)
        self.lead_spinbox.pack(pady=3)
        self.lead_spinbox.delete(0, tk.END)
        self.lead_spinbox.insert(0, "10")  # m·∫∑c ƒë·ªãnh nh·∫Øc tr∆∞·ªõc 10 ph√∫t

        # === M·ª•c ch·ªçn nh·∫°c ===
        self.music_label = tk.Label(self.frame, text="Ch·ªçn nh·∫°c nh·∫Øc nh·ªü:")
        self.music_label.pack()

        # L·∫•y danh s√°ch nh·∫°c t·ª´ API (bao g·ªìm c·∫£ m·∫∑c ƒë·ªãnh + nh·∫°c user)
        all_music_paths = api_client.get_music_list(username)
        all_music = [os.path.basename(path) for path in all_music_paths]  # ch·ªâ l·∫•y t√™n file

        # Th√™m l·ª±a ch·ªçn upload
        all_music.append("T√πy ch·ªçn kh√°c (t·∫£i l√™n...)")

        # ƒê·∫∑t v√†o OptionMenu
        self.selected_music = tk.StringVar()
        self.selected_music.set(all_music[0])  # ch·ªçn m·ª•c ƒë·∫ßu ti√™n m·∫∑c ƒë·ªãnh

        # T·∫°o khung ch·ª©a dropdown + n√∫t nghe th·ª≠
        self.music_frame = tk.Frame(self.frame)
        self.music_frame.pack(pady=5)

        self.music_menu = tk.OptionMenu(self.music_frame, self.selected_music, *all_music, command=self.handle_music_choice)
        self.music_menu.pack(side=tk.LEFT)

        # n√∫t nghe th·ª≠ nh·∫°c
        self.play_button = tk.Button(self.music_frame, text="üîä Nghe th·ª≠", command=self.preview_music)
        self.play_button.pack(side=tk.LEFT, padx=5)

        # n√∫t d·ª´ng nghe
        self.stop_button = tk.Button(self.music_frame, text="‚èπ D·ª´ng", command=self.stop_music)
        self.stop_button.pack(side=tk.LEFT)

        # n√∫t add task
        self.add_button = tk.Button(self.frame, text="Add Task", command=self.add_task)
        self.add_button.pack(pady=5)

        self.listbox = tk.Listbox(self.frame, width=50)
        self.listbox.pack(pady=10)

        self.toggle_button = tk.Button(self.frame, text="‚úÖ Toggle Completed", command=self.toggle_task)
        self.toggle_button.pack(pady=5)

        self.listbox.bind("<<ListboxSelect>>", self.show_description)


        self.refresh_list()

    # def on_close(self):
    #     if messagebox.askokcancel("Tho√°t", "B·∫°n c√≥ ch·∫Øc mu·ªën tho√°t?"):
    #         api_client.logout_user(self.username)
    #         self.root.destroy()

    def add_task(self):
        title = self.title_entry.get()
        description = self.description_entry.get()
        date_str = self.date_entry.get()
        hour_str = self.hour_spinbox.get()
        minute_str = self.minute_spinbox.get()
        music_path = self.selected_music.get()
        lead_time = int(self.lead_spinbox.get())

        if not title:
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p t√™n task.")
            return

        try:
            deadline_obj = datetime.strptime(f"{date_str} {hour_str}:{minute_str}", "%d-%m-%Y %H:%M")
            deadline_iso = deadline_obj.isoformat()
        except ValueError:
            messagebox.showerror("L·ªói", "Ng√†y ho·∫∑c gi·ªù kh√¥ng h·ª£p l·ªá.")
            return

        success = api_client.add_todo(
            self.username,
            title=title,
            hour=int(hour_str),
            minute=int(minute_str),
            description=description,
            deadline=deadline_iso,
            completed=False,
            music=music_path,
            lead_time=lead_time
        )

        if success:
            self.todos = api_client.get_todos(self.username)
            self.refresh_list()
            self.title_entry.delete(0, tk.END)
            self.description_entry.delete(0, tk.END)
            self.hour_spinbox.delete(0, tk.END)
            self.hour_spinbox.insert(0, "00")
            self.minute_spinbox.delete(0, tk.END)
            self.minute_spinbox.insert(0, "00")

            # ‚úÖ Ki·ªÉm tra deadline sau khi th√™m task
            for todo in self.todos:
                if todo.get("title") == title:
                    todo["lead_time"] = lead_time
                    self.compare_time(todo)
        else:
            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ th√™m task.")

    def refresh_list(self):
        self.listbox.delete(0, tk.END)
        for todo in self.todos:
            title_str = todo.get("title", "")
            status = "[‚úî]" if todo.get("completed") else "[ ]"

            completed_at = todo.get("completed_at")
            if completed_at:
                try:
                    # ‚ö†Ô∏è ƒê·∫£m b·∫£o completed_at l√† chu·ªói d·∫°ng ISO c√≥ th·ªÉ parse
                    dt = datetime.fromisoformat(completed_at.replace("Z", ""))
                    formatted_time = dt.strftime("%d-%m-%Y %H:%M")
                except Exception as e:
                    print(f"[DEBUG] Error parsing completed_at: {e}")
                    formatted_time = completed_at.replace("T", " ")
                time_str = f" ({formatted_time})"
            else:
                time_str = ""

            self.listbox.insert(tk.END, f"{status} {title_str}{time_str}")

    def show_description(self, event):
        selected = self.listbox.curselection()
        if not selected:
            return
        index = selected[0]
        text = self.listbox.get(index)

        if text.strip().startswith("‚Ü≥"):
            return

        # N·∫øu ƒë√£ m·ªü m√¥ t·∫£ cho task n√†y ‚Üí ƒë√≥ng l·∫°i
        if index + 2 < self.listbox.size():
            next_line = self.listbox.get(index + 1)
            next_next_line = self.listbox.get(index + 2)
            if next_line.strip().startswith("‚Ü≥") and next_next_line.strip().startswith("‚Ü≥"):
                self.listbox.delete(index + 1)
                self.listbox.delete(index + 1)
                return

        # X√≥a m√¥ t·∫£ c≈©
        to_delete = [i for i in range(self.listbox.size()) if self.listbox.get(i).strip().startswith("‚Ü≥")]
        for i in reversed(to_delete):
            self.listbox.delete(i)

        # Hi·ªÉn th·ªã m√¥ t·∫£ cho task hi·ªán t·∫°i
        if index < len(self.todos):
            task = self.todos[index]
            description = task.get('description', '')
            deadline = task.get('deadline', '').replace("T", " ")  # ‚úÖ B·ªè T
            hour = str(task.get('hour', '00')).zfill(2)
            minute = str(task.get('minute', '00')).zfill(2)

            self.listbox.insert(index + 1, f"   ‚Ü≥ Description: {description}")
            self.listbox.insert(index + 2, f"   ‚Ü≥ Deadline: {deadline} | {hour}:{minute}")

    def play_music(self, file_name):
        # ∆Øu ti√™n t√¨m trong th∆∞ m·ª•c local tr∆∞·ªõc
        user_path = os.path.join("/home/yuu/uploads", self.username, file_name)
        default_path = os.path.join("/home/yuu/uploads/default", file_name)

        if os.path.exists(user_path):
            file_path = user_path
        elif os.path.exists(default_path):
            file_path = default_path
        else:
            print("[ERROR] Kh√¥ng t√¨m th·∫•y file:", file_name)
            return

        print(f"[DEBUG] Playing music: {file_path}")
        try:
            pygame.mixer.init()
            pygame.mixer.music.load(file_path)
            pygame.mixer.music.play()
        except Exception as e:
            print(f"[ERROR] Kh√¥ng th·ªÉ ph√°t nh·∫°c: {e}")

    def preview_music(self):
        import requests

        selected = self.selected_music.get()
        if selected == "T√πy ch·ªçn kh√°c (t·∫£i l√™n...)":
            messagebox.showinfo("Th√¥ng b√°o", "B·∫°n c·∫ßn ch·ªçn m·ªôt file nh·∫°c c·ª• th·ªÉ ƒë·ªÉ nghe th·ª≠.")
            return

        # T√¨m ƒë∆∞·ªùng d·∫´n g·ªëc t·ª´ get_music_list
        all_music_paths = api_client.get_music_list(self.username)
        selected_path = None
        for path in all_music_paths:
            if path.endswith(f"/{selected}"):
                selected_path = path
                break

        if not selected_path:
            messagebox.showerror("L·ªói", f"Kh√¥ng t√¨m th·∫•y ƒë∆∞·ªùng d·∫´n nh·∫°c cho: {selected}")
            return

        # T·∫£i file t·ª´ server v·ªÅ local
        # Encode t√™n file an to√†n trong URL
        encoded_path = urllib.parse.quote(selected_path)
        server_url = f"http://yuu.pythonanywhere.com{encoded_path}"  # n·ªëi path th√†nh URL
        base_dir = os.path.dirname(__file__)  # th∆∞ m·ª•c ch·ª©a file .py hi·ªán t·∫°i
        local_music_dir = os.path.join(base_dir, "assets", "music_cache")

        os.makedirs(local_music_dir, exist_ok=True)
        local_file_path = os.path.join(local_music_dir, selected)

        try:
            r = requests.get(server_url)
            r.raise_for_status()
            with open(local_file_path, "wb") as f:
                f.write(r.content)
        except Exception as e:
            print(f"[ERROR] Kh√¥ng th·ªÉ t·∫£i file t·ª´ server: {e}")
            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ t·∫£i file nh·∫°c t·ª´ server.")
            return

        # Ph√°t nh·∫°c
        try:
            pygame.mixer.init()
            pygame.mixer.music.load(local_file_path)
            pygame.mixer.music.play()
        except Exception as e:
            print(f"[ERROR] Kh√¥ng th·ªÉ ph√°t nh·∫°c: {e}")
            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ ph√°t file nh·∫°c.")

    def stop_music(self):
        try:
            pygame.mixer.music.stop()
        except Exception as e:
            print(f"[ERROR] Kh√¥ng th·ªÉ d·ª´ng nh·∫°c: {e}")

    def compare_time(self, todo):
        current_time = time.time()
        deadline_iso = todo.get("deadline")
        hour = todo.get("hour")
        minute = todo.get("minute")
        music_file = todo.get("music")

        if not deadline_iso or hour is None or minute is None:
            return

        try:
            deadline_obj = datetime.fromisoformat(deadline_iso)
            deadline_obj = deadline_obj.replace(hour=int(hour), minute=int(minute))
            deadline_time = time.mktime(deadline_obj.timetuple())

            lead_minutes = int(todo.get("lead_time", 10))
            reminder_time = deadline_time - (lead_minutes * 60)
            time_diff = reminder_time - current_time

            print(f"[COMPARE] Task: {todo.get('title')}, lead_time: {lead_minutes}, time_diff: {time_diff:.2f}")

            if 0 <= time_diff <= 60:
                if not music_file:
                    print(f"[SKIP] Task '{todo.get('title')}' kh√¥ng c√≥ file nh·∫°c.")
                    return

                # T·∫£i file nh·∫°c n·∫øu ch∆∞a c√≥
                all_music_paths = api_client.get_music_list(self.username)
                selected_path = next((p for p in all_music_paths if p.endswith(f"/{music_file}")), None)

                if not selected_path:
                    print(f"[ERROR] Kh√¥ng t√¨m th·∫•y file nh·∫°c cho: {music_file}")
                    return

                encoded_path = urllib.parse.quote(selected_path)
                server_url = f"http://yuu.pythonanywhere.com{encoded_path}"
                base_dir = os.path.dirname(__file__)
                local_music_dir = os.path.join(base_dir, "assets", "music_cache")
                os.makedirs(local_music_dir, exist_ok=True)
                local_file_path = os.path.join(local_music_dir, music_file)

                if not os.path.exists(local_file_path):
                    try:
                        r = requests.get(server_url)
                        r.raise_for_status()
                        with open(local_file_path, "wb") as f:
                            f.write(r.content)
                    except Exception as e:
                        print(f"[ERROR] Kh√¥ng th·ªÉ t·∫£i file nh·∫°c t·ª´ server: {e}")
                        return

                # ‚úÖ T·ª± ƒë·ªông ph√°t nh·∫°c ngay l·∫≠p t·ª©c
                try:
                    pygame.mixer.init()
                    pygame.mixer.music.load(local_file_path)
                    pygame.mixer.music.play()
                except Exception as e:
                    print(f"[ERROR] Kh√¥ng th·ªÉ ph√°t nh·∫°c: {e}")
                    return

                # ‚úÖ Hi·ªán th√¥ng b√°o sau khi ph√°t nh·∫°c
                answer = messagebox.askyesno(
                    "‚è∞ Nh·∫Øc nh·ªü",
                    f"Task '{todo.get('title', '')}' s·∫Ω ƒë·∫øn h·∫°n sau {lead_minutes} ph√∫t.\n\n"
                    "B·∫°n c√≥ mu·ªën ƒë∆∞·ª£c nh·∫Øc l·∫°i sau 5 ph√∫t kh√¥ng?\n\n"
                    "(Ch·ªçn 'No' ƒë·ªÉ t·∫Øt nh·∫°c v√† kh√¥ng nh·∫Øc l·∫°i.)"
                )

                if answer:
                    print("[INFO] Ng∆∞·ªùi d√πng ch·ªçn nh·∫Øc l·∫°i sau 5 ph√∫t")
                    pygame.mixer.music.stop()  # ‚úÖ D·ª´ng nh·∫°c ngay
                    self.root.after(300000, lambda: [self.play_music(todo.get("music")), messagebox.showinfo("‚è∞ Nh·∫Øc l·∫°i", f"Task '{todo.get('title')}' ƒë·∫øn h·∫°n s·∫Øp t·ªõi!")])
                else:
                    pygame.mixer.music.stop()
                    print("[INFO] Ng∆∞·ªùi d√πng ch·ªçn kh√¥ng nh·∫Øc l·∫°i, nh·∫°c d·ª´ng.")

        except Exception as e:
            print(f"[ERROR] Failed to parse deadline for task '{todo.get('title', '')}': {e}")

    def toggle_task(self):
        index = self.listbox.curselection()
        if not index:
            return
        idx = index[0]

        # B·ªè qua n·∫øu click v√†o d√≤ng m√¥ t·∫£
        if self.listbox.get(idx).strip().startswith("‚Ü≥"):
            return

        if idx >= len(self.todos):
            return

        todo = self.todos[idx]
        todo["completed"] = not todo.get("completed", False)
        if todo["completed"]:
            todo["completed_at"] = time.strftime("%Y-%m-%d %H:%M:%S")
        else:
            todo["completed_at"] = None

        # G·ª≠i update l√™n server
        success = api_client.update_todo(self.username, todo)  # ‚ö†Ô∏è B·∫°n n√™n t·∫°o m·ªôt h√†m update_todo ri√™ng, nh∆∞ng t·∫°m d√πng l·∫°i add_todo n·∫øu server h·ªó tr·ª£.
        if success:
            self.todos = api_client.get_todos(self.username)
            self.refresh_list()
        else:
            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i.")

    def handle_music_choice(self, choice):
        if "T√πy ch·ªçn" in choice:
            file_path = filedialog.askopenfilename(
                title="Ch·ªçn file nh·∫°c MP3",
                filetypes=[("MP3 Files", "*.mp3")]
            )
            if file_path:
                max_size_mb = 3
                file_size_mb = os.path.getsize(file_path) / (1024 * 1024)

                if file_size_mb > max_size_mb:
                    messagebox.showwarning("L·ªõn h∆°n 3MB", "Vui l·∫∑ng ch·ªçn file nh·∫°c kh·ªè h∆°n 3MB.")
                    self.selected_music.set(self.music_options[0])
                    return

                self.selected_music.set(file_path)
            else:
                self.selected_music.set(self.music_options[0])  # Quay l·∫°i default n·∫øu ng∆∞·ªùi d√πng cancel

    def check_all_deadlines(self):
        self.todos = api_client.get_todos(self.username)
        for todo in self.todos:
            print("[DEBUG]", todo)  # üëà th√™m d√≤ng n√†y ƒë·ªÉ xem t·ª´ng task
            if not todo.get("completed"):
                self.schedule_reminder(todo)  # ‚úÖ g·ªçi thay v√¨ compare_time
        self.root.after(60000, self.check_all_deadlines)

    def schedule_reminder(self, todo):
        current_time = time.time()
        deadline_iso = todo.get("deadline")
        hour = todo.get("hour")
        minute = todo.get("minute")

        if not deadline_iso or hour is None or minute is None:
            return

        try:
            deadline_obj = datetime.fromisoformat(deadline_iso)
            deadline_obj = deadline_obj.replace(hour=int(hour), minute=int(minute))
            deadline_time = time.mktime(deadline_obj.timetuple())

            lead_minutes = int(todo.get("lead_time", 10))
            reminder_time = deadline_time - (lead_minutes * 60)
            delay_ms = int((reminder_time - current_time) * 1000)

            if delay_ms <= 0:
                self.compare_time(todo)  # ƒê√£ t·ªõi th·ªùi ƒëi·ªÉm nh·∫Øc
            else:
                self.root.after(delay_ms, lambda: self.compare_time(todo))  # ‚úÖ nh·∫Øc ƒë√∫ng th·ªùi ƒëi·ªÉm
        except Exception as e:
            print(f"[ERROR] Failed to schedule reminder: {e}")

    def logout(self):
        confirm = messagebox.askyesno("Logout", "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t?")
        if confirm:
            api_client.logout_user(self.username) # G·ªçi API logout

            self.root.destroy()

            # Quay l·∫°i m√†n h√¨nh ƒëƒÉng nh·∫≠p
            import tkinter as tk
            from manageUser import manageUser
            from userApp import LoginRegisterApp

            new_root = tk.Tk()
            app = LoginRegisterApp(new_root, manageUser())
            new_root.mainloop()
